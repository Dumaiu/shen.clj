"**********************************************************************************
*                           The License						                                      *
* 										                                                                  *
* The user is free to produce commercial applications with the software, to 	          *
* distribute these applications in source or binary  form, and to charge monies         *
* for them as he sees fit and in concordance with the laws of the land subject 	        *
* to the following license.							                                                *
*										                                                                    * 
* 1. The license applies to all the software and all derived software and 	            *
*    must appear on such.							                                                  *
*										                                                                    *
* 2. It is illegal to distribute the software without this license attached	            *
*    to it and use of the software implies agreement with the license as such.          *
*    It is illegal for anyone who is not the copyright holder to tamper with 	          *
*    or change the license.							                                                *
*										                                                                    *
* 3. Neither the names of Lambda Associates or the copyright holder may be used         *
*    to endorse or promote products built using the software without specific 	        *
*    prior written permission from the copyright holder.		                            *
*										                                                                    *
* 4. That possession of this license does not confer on the copyright holder 	          *
*    any special contractual obligation towards the user. That in no event 	            * 
*    shall the copyright holder be liable for any direct, indirect, incidental,        *   
*    special, exemplary or consequential damages (including but not limited             *
*    to procurement of substitute goods or services, loss of use, data, 	              * 
*    interruption), however caused and on any theory of liability, whether in	          * 
*    contract, strict liability or tort (including negligence) arising in any         	*
*    way out of the use of the software, even if advised of the possibility of         	*
*    such damage.						                                                        		* 
*										                                                                    *
* 5. It is permitted for the user to change the software, for the purpose of 	          *
*    improving performance, correcting an error, or porting to a new platform, 	        *
*    and distribute the derived version of Shen provided the resulting program 	        *
*    conforms in all respects to the Shen standard and is issued under that             * 
*    title. The user must make it clear with his distribution that he/she is 	          *
*    the author of the changes and what these changes are and why. 		                  *
*										                                                                    *
* 6. Derived versions of this software in whatever form are subject to the same         *
*    restrictions. In particular it is not permitted to make derived copies of          *
*    this software which do not conform to the Shen standard or appear under a          *
*    different title.								                                                    *
*										                                                                    *
*    It is permitted to distribute versions of Shen which incorporate libraries,        *
*    graphics or other facilities which are not part of the Shen standard.	            *
*										                                                                    *
* For an explication of this license see www.shenlanguage.org/license.htm which         *
* explains this license in full.                                                        *
*				 						                                                                    *
*****************************************************************************************
"(defun shen.yacc (V2091) (cond ((and (cons? V2091) (and (= defcc (hd V2091)) (and (cons? (tl V2091)) (and (cons? (tl (tl V2091))) (and (= { (hd (tl (tl V2091)))) (and (cons? (tl (tl (tl V2091)))) (and (cons? (tl (tl (tl (tl V2091))))) (and (= ==> (hd (tl (tl (tl (tl V2091)))))) (and (cons? (tl (tl (tl (tl (tl V2091)))))) (and (cons? (tl (tl (tl (tl (tl (tl V2091))))))) (= } (hd (tl (tl (tl (tl (tl (tl V2091)))))))))))))))))) (shen.yacc (cons defcc (cons (hd (tl V2091)) (tl (tl (tl (tl (tl (tl (tl V2091))))))))))) ((and (cons? V2091) (and (= defcc (hd V2091)) (cons? (tl V2091)))) (shen.yacc->shen (hd (tl V2091)) (tl (tl V2091)))) (true (shen.sys-error shen.yacc))))

(defun shen.yacc->shen (V2092 V2093) (cons define (cons V2092 (shen.yacc_cases (map shen.cc_body (shen.split_cc_rules V2093 ()))))))

(defun shen.yacc_cases (V2094) (append (mapcan (lambda Case (cons Stream (cons <- (cons Case ())))) V2094) (cons _ (cons -> (cons (cons fail ()) ())))))

(defun shen.first_n (V2099 V2100) (cond ((= 0 V2099) ()) ((= () V2100) ()) ((cons? V2100) (cons (hd V2100) (shen.first_n (- V2099 1) (tl V2100)))) (true (shen.sys-error shen.first_n))))

(defun shen.split_cc_rules (V2101 V2102) (cond ((and (= () V2101) (= () V2102)) ()) ((= () V2101) (cons (shen.split_cc_rule (reverse V2102) ()) ())) ((and (cons? V2101) (= ; (hd V2101))) (cons (shen.split_cc_rule (reverse V2102) ()) (shen.split_cc_rules (tl V2101) ()))) ((cons? V2101) (shen.split_cc_rules (tl V2101) (cons (hd V2101) V2102))) (true (shen.sys-error shen.split_cc_rules))))

(defun shen.split_cc_rule (V2103 V2104) (cond ((and (cons? V2103) (and (= := (hd V2103)) (and (cons? (tl V2103)) (= () (tl (tl V2103)))))) (cons (reverse V2104) (tl V2103))) ((and (cons? V2103) (and (= := (hd V2103)) (and (cons? (tl V2103)) (and (cons? (tl (tl V2103))) (and (= where (hd (tl (tl V2103)))) (and (cons? (tl (tl (tl V2103)))) (= () (tl (tl (tl (tl V2103))))))))))) (cons (reverse V2104) (cons (cons where (cons (hd (tl (tl (tl V2103)))) (cons (hd (tl V2103)) ()))) ()))) ((= () V2103) (do (pr "warning: " (stoutput)) (do (map (lambda X (pr (shen.app X " " shen.a) (stoutput))) (reverse V2104)) (do (pr "has no semantics.
" (stoutput)) (shen.split_cc_rule (cons := (cons (shen.default_semantics (reverse V2104)) ())) V2104))))) ((cons? V2103) (shen.split_cc_rule (tl V2103) (cons (hd V2103) V2104))) (true (shen.sys-error shen.split_cc_rule))))

(defun shen.default_semantics (V2105) (cond ((= () V2105) ()) ((and (cons? V2105) (shen.grammar_symbol? (hd V2105))) (cons append (cons (hd V2105) (cons (shen.default_semantics (tl V2105)) ())))) ((cons? V2105) (cons cons (cons (hd V2105) (cons (shen.default_semantics (tl V2105)) ())))) (true (shen.sys-error shen.default_semantics))))

(defun shen.cc_body (V2106) (cond ((and (cons? V2106) (and (cons? (tl V2106)) (= () (tl (tl V2106))))) (shen.syntax (hd V2106) Stream (hd (tl V2106)))) (true (shen.sys-error shen.cc_body))))

(defun shen.syntax (V2107 V2108 V2109) (cond ((and (= () V2107) (and (cons? V2109) (and (= where (hd V2109)) (and (cons? (tl V2109)) (and (cons? (tl (tl V2109))) (= () (tl (tl (tl V2109))))))))) (cons if (cons (shen.semantics (hd (tl V2109))) (cons (cons shen.pair (cons (cons hd (cons V2108 ())) (cons (shen.semantics (hd (tl (tl V2109)))) ()))) (cons (cons fail ()) ()))))) ((= () V2107) (cons shen.pair (cons (cons hd (cons V2108 ())) (cons (shen.semantics V2109) ())))) ((cons? V2107) (if (shen.grammar_symbol? (hd V2107)) (shen.recursive_descent V2107 V2108 V2109) (if (variable? (hd V2107)) (shen.variable-match V2107 V2108 V2109) (if (shen.terminal? (hd V2107)) (shen.check_stream V2107 V2108 V2109) (if (shen.jump_stream? (hd V2107)) (shen.jump_stream V2107 V2108 V2109) (if (shen.list_stream? (hd V2107)) (shen.list_stream (shen.decons (hd V2107)) (tl V2107) V2108 V2109) (simple-error (shen.app (hd V2107) " is not legal syntax
" shen.a)))))))) (true (shen.sys-error shen.syntax))))

(defun shen.list_stream? (V2118) (cond ((cons? V2118) true) (true false)))

(defun shen.decons (V2119) (cond ((and (cons? V2119) (and (= cons (hd V2119)) (and (cons? (tl V2119)) (and (cons? (tl (tl V2119))) (= () (tl (tl (tl V2119)))))))) (cons (hd (tl V2119)) (shen.decons (hd (tl (tl V2119)))))) (true V2119)))

(defun shen.list_stream (V2120 V2121 V2122 V2123) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2122 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V2122 ())) ())) ())) ()))) (let Action (cons shen.snd-or-fail (cons (shen.syntax V2120 (cons shen.pair (cons (cons hd (cons (cons hd (cons V2122 ())) ())) (cons (cons shen.hdtl (cons V2122 ())) ()))) (cons shen.leave! (cons (shen.syntax V2121 (cons shen.pair (cons (cons tl (cons (cons hd (cons V2122 ())) ())) (cons (cons shen.hdtl (cons V2122 ())) ()))) V2123) ()))) ())) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ()))))))))

(defun shen.snd-or-fail (V2130) (cond ((and (cons? V2130) (and (cons? (tl V2130)) (= () (tl (tl V2130))))) (hd (tl V2130))) (true (fail))))

(defun shen.grammar_symbol? (V2131) (and (symbol? V2131) (let Cs (explode V2131) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.recursive_descent (V2132 V2133 V2134) (cond ((cons? V2132) (let Test (cons (hd V2132) (cons V2133 ())) (let Action (shen.syntax (tl V2132) (concat Parse_ (hd V2132)) V2134) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V2132)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V2132)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.sys-error shen.recursive_descent))))

(defun shen.variable-match (V2135 V2136 V2137) (cond ((cons? V2135) (let Test (cons cons? (cons (cons hd (cons V2136 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V2135)) (cons (cons hd (cons (cons hd (cons V2136 ())) ())) (cons (shen.syntax (tl V2135) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2136 ())) ())) (cons (cons shen.hdtl (cons V2136 ())) ()))) V2137) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.sys-error shen.variable-match))))

(defun shen.terminal? (V2146) (cond ((cons? V2146) false) ((variable? V2146) false) (true true)))

(defun shen.jump_stream? (V2151) (cond ((= V2151 _) true) (true false)))

(defun shen.check_stream (V2152 V2153 V2154) (cond ((cons? V2152) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V2153 ())) ())) (cons (cons = (cons (hd V2152) (cons (cons hd (cons (cons hd (cons V2153 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V2152) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2153 ())) ())) (cons (cons shen.hdtl (cons V2153 ())) ()))) V2154) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.sys-error shen.check_stream))))

(defun shen.jump_stream (V2155 V2156 V2157) (cond ((cons? V2155) (let Test (cons cons? (cons (cons hd (cons V2156 ())) ())) (let Action (shen.syntax (tl V2155) (cons shen.pair (cons (cons tl (cons (cons hd (cons V2156 ())) ())) (cons (cons shen.hdtl (cons V2156 ())) ()))) V2157) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.sys-error shen.jump_stream))))

(defun shen.semantics (V2158) (cond ((and (cons? V2158) (and (= shen.leave! (hd V2158)) (and (cons? (tl V2158)) (= () (tl (tl V2158)))))) (hd (tl V2158))) ((= () V2158) ()) ((shen.grammar_symbol? V2158) (cons shen.hdtl (cons (concat Parse_ V2158) ()))) ((variable? V2158) (concat Parse_ V2158)) ((cons? V2158) (map shen.semantics V2158)) (true V2158)))

(defun fail () shen.fail!)

(defun shen.pair (V2159 V2160) (cons V2159 (cons V2160 ())))

(defun shen.hdtl (V2161) (hd (tl V2161)))

(defun <!> (V2168) (cond ((and (cons? V2168) (and (cons? (tl V2168)) (= () (tl (tl V2168))))) (cons () (cons (hd V2168) ()))) (true (fail))))

(defun <e> (V2173) (cond ((and (cons? V2173) (and (cons? (tl V2173)) (= () (tl (tl V2173))))) (cons (hd V2173) (cons () ()))) (true (shen.sys-error <e>))))



